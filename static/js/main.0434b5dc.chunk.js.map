{"version":3,"sources":["components/AdminTesting.module.css","assets/stake.png","assets/unstake.png","assets/icon.png","components/Staking.module.css","components/Navigation.module.css","App.module.css","components/Staking.js","components/AdminTesting.js","components/Navigation.js","App.js","index.js"],"names":["module","exports","for_testing","network","__webpack_require__","p","Staking","icon","inputDiv","input","totals","goMax","stakeButton","unstakeButton","stakeIcon","navigation","buttonActive","buttonNonActive","Grid","Child","curtain","props","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","userBalance","inputHandler","react_default","a","createElement","className","classes","src","alt","stakerAddr","account","apy","type","min","step","onChange","event","preventDefault","target","value","onClick","stakeHandler","unStakeHandler","unstakeIcon","totalStaked","page","rewardsBalance","myStake","myRewards","AdminTesting","claimTst","name","id","contractBalance","Navigation","poolStatus","setPoolStatus","changePool","val","changePage","require","config","App","setAccount","_useState3","_useState4","setNetwork","_useState5","_useState6","LPToken","setLPToken","_useState7","_useState8","StakingManagerContract","setStakingManagerContract","_useState9","_useState10","TestTokenClaimerContract","setTestTokenClaimerContract","_useState11","_useState12","_useState13","_useState14","setContractBalance","_useState15","_useState16","setTotalStaked","_useState17","_useState18","setMyStake","_useState19","_useState20","setMyRewards","_useState21","_useState22","appStatus","setAppStatus","_useState23","_useState24","loader","setLoader","_useState25","_useState26","setUserBalance","_useState27","_useState28","setRewardsBalance","_useState29","_useState30","setApy","_useState31","_useState32","setPage","poolID","default","custom","custom2","StakingManager","address","poolToken","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetchDataFromBlockchain","stop","apply","this","arguments","ethEnabled","_ref2","_callee2","_context2","syncdata","_ref3","_callee3","web3","accounts","networkId","networkType","testTokenData","testTokenContract","tokenClaimer","tokenStaking","_web","_balance","convertedBalance","ertContract","_ertBalance","convertedERTBalance","tokenClaimerData","_web2","tokenStakingData","_web3","ts","convertedTotalBalance","tmpts","mySt","_convertedBalance","rewards","_convertedBalance2","_context3","window","ethereum","request","method","Web3","eth","getAccounts","sent","net","getId","getNetworkType","objectSpread","LPFactory","networks","Contract","abi","methods","balanceOf","call","utils","fromWei","toString","RewardToken","alert","TestTokenClaimer","getTotalStaked","getStaked","getTotalRewards","from","redistributeRewards","_ref4","_callee4","_context4","harvestRewards","send","on","hash","receipt","confirmationNumber","error","console","log","code","redistributeCustomRewards","_ref5","_callee5","_context5","customRewards","_ref6","_callee6","_context6","components_Navigation","_page","components_Staking","withdraw","message","convertToWei","toWei","approve","deposit","received","components_AdminTesting","tokenStakingContract","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0434b5dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"for_testing\":\"AdminTesting_for_testing__1BMFB\",\"network\":\"AdminTesting_network__35_9H\"};","module.exports = __webpack_public_path__ + \"static/media/stake.e8708439.png\";","module.exports = __webpack_public_path__ + \"static/media/unstake.cebdc53d.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.6b47307e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Staking\":\"Staking_Staking__1roQa\",\"icon\":\"Staking_icon__1xVgY\",\"inputDiv\":\"Staking_inputDiv__gLZrE\",\"input\":\"Staking_input__3rjzP\",\"totals\":\"Staking_totals__2IZsy\",\"goMax\":\"Staking_goMax__3ACzd\",\"stakeButton\":\"Staking_stakeButton__2fiql\",\"unstakeButton\":\"Staking_unstakeButton__1JWhK\",\"stakeIcon\":\"Staking_stakeIcon__1w4UP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Navigation_navigation__3ri1a\",\"buttonActive\":\"Navigation_buttonActive__1xI7s\",\"buttonNonActive\":\"Navigation_buttonNonActive__ZTeH_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid\":\"App_Grid__1c0AQ\",\"Child\":\"App_Child__18B6y\",\"curtain\":\"App_curtain__ixloU\"};","import React, { useState } from 'react';\nimport classes from './Staking.module.css';\nimport stakeIcon from '../assets/stake.png';\nimport unstakeIcon from '../assets/unstake.png';\nimport icon from '../assets/icon.png';\n\nconst Staking = (props) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const inputChangeHandler = (event) => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n    props.inputHandler(event.target.value);\n  };\n\n  const goMax = () => {\n    setInputValue(props.userBalance);\n    props.inputHandler(props.userBalance);\n  };\n\n  return (\n    <div className={classes.Staking}>\n      <img src={icon} alt=\"logo\" className={classes.icon} />\n      <h1> Yield Farming / Token Staking dApp</h1>\n      <p> Staking Contract Address: {props.stakerAddr}</p>\n      <p> My Wallet : {props.account}</p>\n      <h3>\n        {props.apy}% (APY) - {props.apy / 365}% Daily Earnings\n      </h3>\n      <div className={classes.inputDiv}>\n        <input\n          className={classes.input}\n          type=\"number\"\n          min=\"0\"\n          step=\"1\"\n          onChange={inputChangeHandler}\n          value={inputValue}\n        ></input>\n      </div>\n      <button\n        className={classes.stakeButton}\n        onClick={() => {\n          props.stakeHandler();\n          \n        }}\n      >\n        <img src={stakeIcon} alt=\"stake icon\" className={classes.stakeIcon} />\n        <p>Stake</p>\n      </button>\n      &nbsp; &nbsp;\n      <button className={classes.unstakeButton} onClick={props.unStakeHandler}>\n        <img\n          src={unstakeIcon}\n          alt=\"unstake icon\"\n          className={classes.stakeIcon}\n        />\n        <p>Unstake All</p>\n      </button>\n      <div className={classes.totals}>\n        <h4>\n          Total Staked (by all users): {props.totalStaked} LP{props.page+1} Token\n        </h4>\n        <div>&nbsp;</div>\n        <h5 onClick={goMax} className={classes.goMax}>\n          LP{props.page+1} Balance: {props.userBalance} LP{props.page+1}\n        </h5>\n        <h5 onClick={goMax} className={classes.goMax}>\n          ERT Balance: {props.rewardsBalance} ERT\n        </h5>\n        <h5>\n          LP{props.page+1} Stake: {props.myStake} LP{props.page+1} \n        </h5>\n        <h5>\n          Rewards:{' '} {props.myRewards} ERT\n        </h5>\n      </div>\n    </div>\n  );\n};\nexport default Staking;\n","import React from 'react';\nimport classes from './AdminTesting.module.css';\n\nconst AdminTesting = (props) => {\n  return (\n    <div className={classes.for_testing}>\n      \n      <button onClick={props.claimTst}>Claim for 1000 LP{props.page+1} token </button>\n      &nbsp; &nbsp;\n      {/* <button onClick={props.redistributeRewards}>\n        {props.page === 1\n          ? `Redistribute rewards (Admin)`\n          : `Custom redistribution (Admin)`}\n      </button> */}\n      <div className={classes.network}>\n        <p>\n          Selected Network: <b>{props.network.name}</b>\n          &nbsp; id: <b>{props.network.id}</b>\n        </p>\n        <p>Contract Balance: {props.contractBalance} LP{props.page+1} </p>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminTesting;\n","import React, { useState } from 'react';\nimport classes from './Navigation.module.css';\n\nconst Navigation = (props) => {\n  const [poolStatus, setPoolStatus] = useState('default');\n\n  const changePool = (val) => {\n    if (val === poolStatus) {\n    } else {\n      setPoolStatus(val);\n      props.changePage(val);\n    }\n  };\n\n  return (\n    <div className={classes.navigation}>\n      <button\n        className={\n          poolStatus === 'default'\n            ? classes.buttonActive\n            : classes.buttonNonActive\n        }\n        onClick={() => {\n          changePool('default');\n        }}\n      >\n        {props.apy[0]}% (APY)\n      </button>\n      <button\n        className={\n          poolStatus === 'custom'\n            ? classes.buttonActive\n            : classes.buttonNonActive\n        }\n        onClick={() => {\n          changePool('custom');\n        }}\n      >\n        {props.apy[1]}% (APY)\n      </button>\n      <button\n        className={\n          poolStatus === 'custom2'\n            ? classes.buttonActive\n            : classes.buttonNonActive\n        }\n        onClick={() => {\n          changePool('custom2');\n        }}\n      >\n        {props.apy[2]}% (APY)\n      </button>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport classes from './App.module.css';\nimport RewardToken from './abis/RewardToken.json';\nimport LPFactory from './abis/LPFactory.json';\nimport TestTokenClaimer from './abis/TestTokenClaimer.json';\nimport StakingManager from './abis/StakingManager.json';\nimport Staking from './components/Staking';\nimport AdminTesting from './components/AdminTesting';\nimport Navigation from './components/Navigation';\nrequire('dotenv').config()\n\n\nconst App = () => {\n  const [account, setAccount] = useState('Connecting to Metamask..');\n  const [network, setNetwork] = useState({ id: '0', name: 'none' });\n  const [LPToken, setLPToken] = useState('');\n  const [StakingManagerContract, setStakingManagerContract] = useState('');\n  const [TestTokenClaimerContract, setTestTokenClaimerContract] = useState('');\n\n  const [inputValue, setInputValue] = useState('');\n  const [contractBalance, setContractBalance] = useState('0');\n  const [totalStaked, setTotalStaked] = useState([0, 0 ,0]);\n  const [myStake, setMyStake] = useState([0, 0, 0]);\n  const [myRewards, setMyRewards] = useState([0, 0, 0]);\n  const [appStatus, setAppStatus] = useState(true);\n  const [loader, setLoader] = useState(false);\n  const [userBalance, setUserBalance] = useState('0');\n  const [rewardsBalance, setRewardsBalance] = useState('0');\n  const [apy, setApy] = useState([0, 0, 0]);\n  const [page, setPage] = useState(0);\n  \n  const poolID = {\"default\":0,\"custom\":1,\"custom2\":2};\n\n  // contract address\n  StakingManager.address = \"0x5c6d45fb5EAe1aD55A11b1E388FcB2089B732038\";\n  const ertAddress = \"0x81E67Fc577a650A504C84AB348c9a0298350d956\";\n  const poolToken = [\n    \"0x54457B3dA675FBAa9FeAEed1A36F4881d78dDb40\",\n    \"0x29D5936b83d9216EE40b1EEB99f2B3352148d3b6\",\n    \"0x0c6dF3d5d9FEf8A398cB6DF7362A34AB9740cc28\"\n  ];\n\n  // todo : fetch stake info from contract directly.\n  useEffect(() => {\n    //connecting to ethereum blockchain\n    const ethEnabled = async () => {\n      fetchDataFromBlockchain();\n    };\n\n    ethEnabled();\n  }, []);\n\n  // watch page change\n  useEffect(() => {\n    const syncdata = async () => {\n      fetchDataFromBlockchain();\n    };\n    syncdata();\n    \n  }, [page]);\n\n  const fetchDataFromBlockchain = async () => {\n    if (window.ethereum) {\n      // await window.ethereum.send('eth_requestAccounts');\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      window.web3 = new Web3(window.ethereum);\n\n      //connecting to metamask\n      let web3 = window.web3;\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n\n      //loading users network ID and name\n      const networkId = await web3.eth.net.getId();\n      const networkType = await web3.eth.net.getNetworkType();\n      setNetwork({ ...network, id: networkId, name: networkType });\n\n     \n      //loading TestToken contract data\n      // todo: load token data from staking manager\n      const testTokenData = LPFactory.networks[networkId];\n      let testTokenContract = null;\n      let tokenClaimer = null;\n      let tokenStaking = null;\n\n      if (testTokenData) {\n        let web3 = window.web3;\n\n        // LP token\n        testTokenContract = new web3.eth.Contract(\n          LPFactory.abi,\n          poolToken[page]\n        );\n        setLPToken(testTokenContract);\n        \n        //  fetching balance of Testtoken and storing in state\n        let _balance = await testTokenContract.methods\n          .balanceOf(accounts[0])\n          .call();\n        let convertedBalance = window.web3.utils.fromWei(\n          _balance.toString(),\n          'Ether'\n        );\n        setUserBalance(convertedBalance);\n\n        // ERT token\n        let ertContract = new web3.eth.Contract(\n          RewardToken.abi,\n          ertAddress\n        );\n        \n        //  fetching balance of Testtoken and storing in state\n        let _ertBalance = await ertContract.methods\n          .balanceOf(accounts[0])\n          .call();\n        let convertedERTBalance = window.web3.utils.fromWei(\n          _ertBalance.toString(),\n          'Ether'\n        );\n        setRewardsBalance(convertedERTBalance);\n\n\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'TestToken contract is not deployed on this network, please change to testnet'\n        );\n      }\n      \n\n      //load Test TokenClaimer\n      const tokenClaimerData = TestTokenClaimer.networks[networkId];\n      if(tokenClaimerData) {\n        let web3 = window.web3;\n        tokenClaimer = new web3.eth.Contract(\n          TestTokenClaimer.abi,\n          tokenClaimerData.address\n        );\n        setTestTokenClaimerContract(tokenClaimer);\n      }\n\n      //loading StakingManager info\n      const tokenStakingData = StakingManager.networks[networkId];\n      if (tokenStakingData) {\n        let web3 = window.web3;\n        tokenStaking = new web3.eth.Contract(\n          StakingManager.abi,\n          tokenStakingData.address\n        );\n        setStakingManagerContract(tokenStaking);\n\n        // fetch total staked\n        if(tokenStaking){\n          let ts = await tokenStaking.methods\n          .getTotalStaked(page)\n          .call();\n          let convertedTotalBalance = window.web3.utils.fromWei(\n            ts.toString(),\n            'Ether'\n          );\n          setContractBalance(convertedTotalBalance);\n          let tmpts = totalStaked;\n          tmpts[page] = convertedTotalBalance;\n          setTotalStaked(tmpts);\n        }\n        \n        // fetch my total staked\n        // not implemented yet\n        if(tokenStaking){\n          let mySt = await tokenStaking.methods\n          .getStaked(page, accounts[0])\n          .call();\n\n          let convertedBalance = window.web3.utils.fromWei(\n            mySt.toString(),\n            'Ether'\n          );\n          myStake[page] = convertedBalance;\n          setMyStake(myStake);\n        }\n\n        // fetch my rewards\n        if(tokenStaking){\n          let rewards = await tokenStaking.methods\n          .getTotalRewards(page)\n          .call({from: accounts[0]});\n          \n          let convertedBalance = window.web3.utils.fromWei(\n            rewards.toString(),\n            'Ether'\n          );\n          myRewards[page] = convertedBalance;\n          setMyRewards(myRewards);\n        }\n        \n        //  Fake APY values \n        // let tempApy = ((await tokenStaking.methods.defaultAPY().call()) / 1000) * 365;\n        // let tempcustomApy = ((await tokenStaking.methods.customAPY().call()) / 1000) * 365;\n        // let tempcustomApy2 = ((await tokenStaking.methods.customAPY().call()*0.45) / 1000) * 365;\n        setApy([50, 30, 20]);\n\n\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'TokenStaking contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      //removing loader\n      setLoader(false);\n    } else if (!window.web3) {\n      setAppStatus(false);\n      setAccount('Metamask is not detected');\n      setLoader(false);\n    }\n  };\n\n  const inputHandler = (received) => {\n    setInputValue(received);\n  };\n\n  const changePage = (_page) => {\n    \n    setPage(poolID[_page]);\n  };\n\n  const stakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether');\n\n        //aproving tokens for spending\n        LPToken.methods\n          .approve(StakingManager.address, convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n\n            StakingManagerContract.methods\n              .deposit(page, convertToWei)\n              .send({ from: account })\n              .on('transactionHash', (hash) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('receipt', (receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('confirmation', (confirmationNumber, receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              });\n            \n          })\n          .on('error', function(error) {\n            setLoader(false);\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n          });\n        setInputValue('');\n      }\n    }\n  };\n\n  const unStakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n\n      // let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n      StakingManagerContract.methods\n        .withdraw(page)\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('receipt', (receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('error', function(error) {\n          console.log('Error Code:', error.code);\n          console.log(error.message);\n          setLoader(false);\n        });\n      setInputValue('');\n    }\n  };\n\n  const redistributeRewards = async () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n      StakingManagerContract.methods\n        .harvestRewards(page)\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('receipt', (receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('error', function(error) {\n          console.log('Error Code:', error.code);\n          console.log(error.code);\n          setLoader(false);\n        });\n    }\n  };\n\n  const redistributeCustomRewards = async () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n      StakingManagerContract.methods\n        .customRewards()\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('receipt', (receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('error', function(error) {\n          console.log('Error Code:', error.code);\n          console.log(error.code);\n          setLoader(false);\n        });\n    }\n  };\n\n  const claimTst = async () => {\n    if (!appStatus) {\n    } else {\n      if(TestTokenClaimerContract){\n        setLoader(true);\n        TestTokenClaimerContract.methods\n        .claimTst( poolToken[page] )\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('receipt', (receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('error', function(error) {\n          console.log('Error Code:', error.code);\n          console.log(error.code);\n          setLoader(false);\n        });\n      }\n      \n    }\n  };\n\n  return (\n    <div className={classes.Grid}>\n      {loader ? <div className={classes.curtain}></div> : null}\n      <div className={classes.loader}></div>\n      <div className={classes.Child}>\n        <Navigation apy={apy} changePage={changePage} />\n        <div>\n          <Staking\n            account={account}\n            totalStaked={ totalStaked[page] }\n            myStake={ myStake[page]}\n            myRewards={ myRewards[page]}\n            stakerAddr={StakingManager.address}\n            userBalance={ userBalance }\n            rewardsBalance={ rewardsBalance }\n            unStakeHandler={unStakeHandler}\n            stakeHandler={stakeHandler}\n            inputHandler={inputHandler}\n            apy={ apy[page] }\n            page={page}\n          />\n        </div>\n        <div className={classes.for_testing}>\n          <AdminTesting\n            network={network}\n            tokenStakingContract={StakingManagerContract}\n            contractBalance={contractBalance}\n            redistributeRewards={\n              page === 1 ? redistributeRewards : redistributeCustomRewards\n            }\n            claimTst={claimTst}\n            page={page}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}